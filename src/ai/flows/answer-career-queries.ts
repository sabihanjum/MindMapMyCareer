'use server';

/**
 * @fileOverview This file defines a Genkit flow for answering career-related queries from students.
 *
 * The flow takes a question as input and returns a helpful answer generated by the Gemini API.
 * It includes input and output schema definitions for type safety and integrates with a
 * pre-defined prompt.
 *
 * @interface AnswerCareerQueriesInput - The input type for the answerCareerQueries function.
 * @interface AnswerCareerQueriesOutput - The output type for the answerCareerQueries function.
 * @function answerCareerQueries - A function that takes an AnswerCareerQueriesInput and returns an AnswerCareerQueriesOutput.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerCareerQueriesInputSchema = z.object({
  question: z.string().describe('The career-related question from the student.'),
});
export type AnswerCareerQueriesInput = z.infer<typeof AnswerCareerQueriesInputSchema>;

const AnswerCareerQueriesOutputSchema = z.object({
  answer: z.string().describe('The answer to the career-related question.'),
});
export type AnswerCareerQueriesOutput = z.infer<typeof AnswerCareerQueriesOutputSchema>;

export async function answerCareerQueries(
  input: AnswerCareerQueriesInput
) {
  return answerCareerQueriesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerCareerQueriesPrompt',
  input: {schema: AnswerCareerQueriesInputSchema},
  output: {schema: AnswerCareerQueriesOutputSchema},
  prompt: `You are a helpful AI career chatbot assisting students with their career-related questions.

  Question: {{{question}}}
  Answer: `,
});

const answerCareerQueriesFlow = ai.defineFlow(
  {
    name: 'answerCareerQueriesFlow',
    inputSchema: AnswerCareerQueriesInputSchema,
    outputSchema: AnswerCareerQueriesOutputSchema,
  },
  async input => {
    const {stream} = await ai.generateStream({
        prompt: {
            ...prompt,
            input,
        }
    });

    return stream.stream();
  }
);
